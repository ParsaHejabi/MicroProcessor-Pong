.MODEL SMALL
.STACK 64

.DATA
    UPPER_WALL_START_ROW DW 30
    UPPER_WALL_START_COL DW 20
    UPPER_WALL_END_ROW DW 35
    UPPER_WALL_END_COL DW 280

    LEFT_WALL_START_ROW DW 35
    LEFT_WALL_START_COL DW 20
    LEFT_WALL_END_ROW DW 190
    LEFT_WALL_END_COL DW 25

    LOWER_WALL_START_ROW DW 185
    LOWER_WALL_START_COL DW 25
    LOWER_WALL_END_ROW DW 190
    LOWER_WALL_END_COL DW 280

    ROCKET_INIT_START_ROW DW 95
    ROCKET_INIT_START_COL DW 281
    ROCKET_INIT_END_ROW DW 125
    ROCKET_INIT_END_COL DW 285

    BALL_INIT_START_ROW DW 120
    BALL_INIT_START_COL DW 260
    BALL_INIT_END_ROW DW 130
    BALL_INIT_END_COL DW 270

    BALL_STATE DW 0                   ; 0:LL  1:UL    2:UR    3:LR

    INIT_SCORE_LD DB '0'
    INIT_SCORE_HD DB '0'

.CODE

MAIN PROC FAR
        MOV AX, @DATA
        MOV DS, AX

        CALL CLEAR_SCREEN
        CALL SET_GRAPHIC_MODE

        CALL SET_CURSOR_POSITION_LD
        CALL DRAW_INIT_SCORE_LD
        CALL SET_CURSOR_POSITION_HD
        CALL DRAW_INIT_SCORE_HD

        CALL DRAW_INIT_ROCKET
        CALL DRAW_WALLS
        CALL DRAW_INIT_BALL

    MAIN_KEYPRESS_LOOP:
        MOV AH, 01
        INT 16H                       ; WAIT FOR FIRST KEY PRESS
        JZ MAIN_KEYPRESS_LOOP

        MOV AH, 00                    ; IF USER WANT TO QUIT LET HIM DO THAT
        INT 16H
        CMP AL, 'Q'                   ; Q KEY PRESSED
        JE MAIN_DONE
        CMP AL, 'q'                   ; q KEY PRESSED
        JE MAIN_DONE

    MAIN_LOOP:
        CALL BALL_MOVEMENT
        MOV AH, 01
        INT 16H                       ; CHECK THE KEY PRESS
        JZ MAIN_LOOP
        CALL CHECK_INPUT
        CMP AL, 'Q'                   ; Q KEY PRESSED
        JE MAIN_DONE
        CMP AL, 'q'                   ; q KEY PRESSED
        JE MAIN_DONE
        JMP MAIN_LOOP

    MAIN_DONE:
        MOV AX, 4C00H                 ; EXIT TO OPERATING SYSTEM
        INT 21H

MAIN ENDP

CLEAR_SCREEN PROC
        MOV AX, 0600H                 ; SCROLL DOWN
        MOV BH, 07H                   ; SCREEN COLOR
        MOV CX, 0000H                 ; FROM TOP LEFT
        MOV DX, 184FH                 ; TO THE BOTTOM RIGHT
        INT 10H

        RET
ENDP CLEAR_SCREEN

SET_GRAPHIC_MODE PROC
        MOV AH, 00H
        MOV AL, 13H
        INT 10H

        RET
ENDP SET_GRAPHIC_MODE

SET_CURSOR_POSITION_HD PROC
        MOV DH, 2
        MOV DL, 19
        MOV BH, 0
        MOV AH, 2
        INT 10H

        RET
ENDP SET_CURSOR_POSITION_HD

DRAW_INIT_SCORE_HD PROC
        MOV DL, INIT_SCORE_HD
        MOV AH, 2
        INT 21H

        RET
ENDP DRAW_INIT_SCORE_HD

SET_CURSOR_POSITION_LD PROC
        MOV DH, 2
        MOV DL, 20
        MOV BH, 0
        MOV AH, 2
        INT 10H

        RET
ENDP SET_CURSOR_POSITION_LD

DRAW_INIT_SCORE_LD PROC
        MOV DL, INIT_SCORE_LD
        MOV AH, 2
        INT 21H

        RET
ENDP DRAW_INIT_SCORE_LD

DRAW_WALLS PROC
        MOV AH, 0CH
        MOV AL, 1111B                 ; WHITE COLOR

    UPPER_WALL:
        MOV DX, UPPER_WALL_START_ROW
    UW_LOOP1:
        MOV CX, UPPER_WALL_START_COL

    UW_LOOP2:
        INT 10H
        INC CX
        CMP CX, UPPER_WALL_END_COL
        JNZ UW_LOOP2
        INC DX
        CMP DX, UPPER_WALL_END_ROW
        JNZ UW_LOOP1

    LEFT_WALL:
        MOV DX, LEFT_WALL_START_ROW
    LW_LOOP1:
        MOV CX, LEFT_WALL_START_COL

    LW_LOOP2:
        INT 10H
        INC CX
        CMP CX, LEFT_WALL_END_COL
        JNZ LW_LOOP2
        INC DX
        CMP DX, LEFT_WALL_END_ROW
        JNZ LW_LOOP1

    LOWER_WALL:
        MOV DX, LOWER_WALL_START_ROW
    LOW_LOOP1:
        MOV CX, LOWER_WALL_START_COL

    LOW_LOOP2:
        INT 10H
        INC CX
        CMP CX, LOWER_WALL_END_COL
        JNZ LOW_LOOP2
        INC DX
        CMP DX, LOWER_WALL_END_ROW
        JNZ LOW_LOOP1

        RET
ENDP DRAW_WALLS

DRAW_INIT_BALL PROC
        MOV AH, 0CH
        MOV AL, 1111B                 ; WHITE COLOR

    INIT_BALL:
        MOV DX, BALL_INIT_START_ROW
    IB_LOOP1:
        MOV CX, BALL_INIT_START_COL

    IB_LOOP2:
        INT 10H
        INC CX
        CMP CX, BALL_INIT_END_COL
        JNZ IB_LOOP2
        INC DX
        CMP DX, BALL_INIT_END_ROW
        JNZ IB_LOOP1

        RET
ENDP DRAW_INIT_BALL

DRAW_INIT_ROCKET PROC
        MOV AH, 0CH
        MOV AL, 1111B                 ; WHITE COLOR

    INIT_ROCKET:
        MOV DX, ROCKET_INIT_START_ROW
    IR_LOOP1:
        MOV CX, ROCKET_INIT_START_COL

    IR_LOOP2:
        INT 10H
        INC CX
        CMP CX, ROCKET_INIT_END_COL
        JNZ IR_LOOP2
        INC DX
        CMP DX, ROCKET_INIT_END_ROW
        JNZ IR_LOOP1

        RET
ENDP DRAW_INIT_ROCKET

CHECK_INPUT PROC
        MOV AH, 0
        INT 16H
        CMP AL, 30D                   ; UP KEY PRESSED
        JE UP_KEYSTROKE
        CMP AL, 'W'                   ; W KEY PRESSED
        JE UP_KEYSTROKE
        CMP AL, 'w'                   ; w KEY PRESSED
        JE UP_KEYSTROKE
        CMP AL, 31D                   ; DOWN KEY PRESSED
        JE DOWN_KEYSTROKE
        CMP AL, 'S'                   ; S KEY PRESSED
        JE DOWN_KEYSTROKE
        CMP AL, 's'                   ; s KEY PRESSED
        JE DOWN_KEYSTROKE
        JMP CI_DONE

    UP_KEYSTROKE:
        CALL SHIFT_UP_ROCKET
        JMP CI_DONE
    DOWN_KEYSTROKE:
        CALL SHIFT_DOWN_ROCKET
        JMP CI_DONE

    CI_DONE:
        RET
ENDP CHECK_INPUT

SHIFT_UP_ROCKET PROC
        MOV AH, 0CH
        MOV BX, 3                     ; WITH ONE INPUT, SHIFT 3 PIXELS

    SUR:
        MOV AL, 0
        MOV DX, ROCKET_INIT_START_ROW
        CMP DX, UPPER_WALL_END_ROW    ; CHECK IF WE REACHED UPPER LIMIT
        JE SUR_DONE

        MOV DX, ROCKET_INIT_END_ROW
        MOV CX, ROCKET_INIT_START_COL
    SUR_LOOP1:
        INT 10H
        INC CX
        CMP CX, ROCKET_INIT_END_COL
        JNZ SUR_LOOP1

        MOV AL, 1111B

        MOV DX, ROCKET_INIT_START_ROW
        MOV CX, ROCKET_INIT_START_COL
    SUR_LOOP2:
        INT 10H
        INC CX
        CMP CX, ROCKET_INIT_END_COL
        JNZ SUR_LOOP2

        DEC ROCKET_INIT_START_ROW
        DEC ROCKET_INIT_END_ROW

        SUB BX, 1
        JNZ SUR

    SUR_DONE:
        RET
ENDP SHIFT_UP_ROCKET

SHIFT_DOWN_ROCKET PROC
        MOV AH, 0CH
        MOV BX, 3                     ; WITH ONE INPUT, SHIFT 3 PIXELS

    SDR:
        MOV AL, 0
        MOV DX, ROCKET_INIT_END_ROW
        CMP DX, LOWER_WALL_START_ROW  ; CHECK IF WE REACHED LOWER LIMIT
        JE SDR_DONE

        MOV DX, ROCKET_INIT_START_ROW
        MOV CX, ROCKET_INIT_START_COL
    SDR_LOOP1:
        INT 10H
        INC CX
        CMP CX, ROCKET_INIT_END_COL
        JNZ SDR_LOOP1

        MOV AL, 1111B

        MOV DX, ROCKET_INIT_END_ROW
        MOV CX, ROCKET_INIT_START_COL
    SDR_LOOP2:
        INT 10H
        INC CX
        CMP CX, ROCKET_INIT_END_COL
        JNZ SDR_LOOP2

        INC ROCKET_INIT_START_ROW
        INC ROCKET_INIT_END_ROW

        SUB BX, 1
        JNZ SDR

    SDR_DONE:
        RET
ENDP SHIFT_DOWN_ROCKET

BALL_MOVEMENT PROC
        MOV CX, BALL_STATE
        CMP CX, 0
        JE CALL_BMLL
        CMP CX, 1
        JE CALL_BMUL
        CMP CX, 2
        JE CALL_BMUR
        CMP CX, 3
        JE CALL_BMLR

    CALL_BMLL:
        CALL BMLL
        JMP BM_DONE
    CALL_BMUL:
        CALL BMUL
        JMP BM_DONE
    CALL_BMUR:
        CALL BMUR
        JMP BM_DONE
    CALL_BMLR:
        CALL BMLR

    BM_DONE:
        RET
ENDP BALL_MOVEMENT

BMLL PROC
        MOV AH, 0CH
        MOV BX, 3                     ; WITH ONE INPUT, SHIFT 3 PIXELS

    BMLL_MAIN_LOOP:
        MOV AL, 0

        MOV DX, BALL_INIT_END_ROW
        CMP DX, LOWER_WALL_START_ROW  ; CHECK IF WE HIT LOWER WALL
        JE BMLL_CM_UL                 ; CHANGE MOVEMENT TO UL
        MOV DX, BALL_INIT_START_COL
        CMP DX, LEFT_WALL_END_COL     ; CHECK IF WE HIT LEFT WALL
        JE BMLL_CM_LR

        MOV DX, BALL_INIT_START_ROW
        MOV CX, BALL_INIT_START_COL
    BMLL_LOOP1:
        INT 10H
        INC CX
        CMP CX, BALL_INIT_END_COL
        JNZ BMLL_LOOP1

        DEC BALL_INIT_START_COL
        INC BALL_INIT_START_ROW

        MOV DX, BALL_INIT_START_ROW
        MOV CX, BALL_INIT_END_COL
        DEC CX
    BMLL_LOOP2:
        INT 10H
        INC DX
        CMP DX, BALL_INIT_END_ROW
        JNZ BMLL_LOOP2

        DEC BALL_INIT_END_COL
        INC BALL_INIT_END_ROW

        MOV AL, 1111B

        MOV DX, BALL_INIT_START_ROW
        MOV CX, BALL_INIT_START_COL
    BMLL_LOOP3:
        INT 10H
        INC DX
        CMP DX, BALL_INIT_END_ROW
        JNZ BMLL_LOOP3

        MOV DX, BALL_INIT_END_ROW
        DEC DX
        MOV CX, BALL_INIT_START_COL
    BMLL_LOOP4:
        INT 10H
        INC CX
        CMP CX, BALL_INIT_END_COL
        JNZ BMLL_LOOP4

        CALL BM_DELAY

        SUB BX, 1
        JNZ BMLL_MAIN_LOOP
        JMP BMLL_DONE

    BMLL_CM_UL:
        MOV BALL_STATE, 1             ; CHANGE DIRECTION TO UL
        JMP BMLL_DONE
    BMLL_CM_LR:
        MOV BALL_STATE, 3             ; CHANGE DIRECTION TO LR
        JMP BMLL_DONE

    BMLL_DONE:
        RET
ENDP BMLL

BMUL PROC
        MOV AH, 0CH
        MOV BX, 3                     ; WITH ONE INPUT, SHIFT 3 PIXELS

    BMUL_MAIN_LOOP:
        MOV AL, 0
        MOV DX, BALL_INIT_START_COL
        CMP DX, LEFT_WALL_END_COL     ; CHECK IF WE HIT LEFT WALL
        JE BMUL_CM_UR
        MOV DX, BALL_INIT_START_ROW
        CMP DX, UPPER_WALL_END_ROW    ; CHECK IF WE HIT UPPER WALL
        JE BMUL_CM_LL

        MOV DX, BALL_INIT_END_ROW
        DEC DX
        MOV CX, BALL_INIT_START_COL
    BMUL_LOOP1:
        INT 10H
        INC CX
        CMP CX, BALL_INIT_END_COL
        JNZ BMUL_LOOP1

        DEC BALL_INIT_START_COL
        DEC BALL_INIT_END_ROW

        MOV DX, BALL_INIT_START_ROW
        MOV CX, BALL_INIT_END_COL
        DEC CX
    BMUL_LOOP2:
        INT 10H
        INC DX
        CMP DX, BALL_INIT_END_ROW
        JNZ BMUL_LOOP2

        DEC BALL_INIT_END_COL
        DEC BALL_INIT_START_ROW

        MOV AL, 1111B

        MOV DX, BALL_INIT_START_ROW
        MOV CX, BALL_INIT_START_COL
    BMUL_LOOP3:
        INT 10H
        INC CX
        CMP CX, BALL_INIT_END_COL
        JNZ BMUL_LOOP3

        MOV DX, BALL_INIT_START_ROW
        INC DX
        MOV CX, BALL_INIT_START_COL
    BMUL_LOOP4:
        INT 10H
        INC DX
        CMP DX, BALL_INIT_END_ROW
        JNZ BMUL_LOOP4

        CALL BM_DELAY

        SUB BX, 1
        JNZ BMUL_MAIN_LOOP
        JMP BMUL_DONE

    BMUL_CM_UR:
        MOV BALL_STATE, 2             ; CHANGE DIRECTION TO UR
        JMP BMUL_DONE
    BMUL_CM_LL:
        MOV BALL_STATE, 0             ; CHANGE DIRECTION TO LL
        JMP BMUL_DONE

    BMUL_DONE:
        RET
ENDP BMUL

BMUR PROC
        MOV AH, 0CH
        MOV BX, 3                     ; WITH ONE INPUT, SHIFT 3 PIXELS

    BMUR_MAIN_LOOP:
        MOV AL, 0

        MOV DX, BALL_INIT_START_ROW
        CMP DX, UPPER_WALL_END_ROW    ; CHECK IF WE HIT UPPER WALL
        JE BMUR_CM_LR                 ; CHANGE MOVEMENT TO LR
        MOV DX, BALL_INIT_END_COL
        CMP DX, ROCKET_INIT_START_COL ; CHECK IF WE ARE GOING TO HIT ROCKET OR NOT
        JE BMUR_ROCKET_CHECK

        MOV DX, BALL_INIT_END_ROW
        DEC DX
        MOV CX, BALL_INIT_START_COL
    BMUR_LOOP1:
        INT 10H
        INC CX
        CMP CX, BALL_INIT_END_COL
        JNZ BMUR_LOOP1

        INC BALL_INIT_END_COL
        DEC BALL_INIT_END_ROW

        MOV DX, BALL_INIT_START_ROW
        MOV CX, BALL_INIT_START_COL
    BMUR_LOOP2:
        INT 10H
        INC DX
        CMP DX, BALL_INIT_END_ROW
        JNZ BMUR_LOOP2

        INC BALL_INIT_START_COL
        DEC BALL_INIT_START_ROW

        MOV AL, 1111B

        MOV DX, BALL_INIT_START_ROW
        MOV CX, BALL_INIT_START_COL
    BMUR_LOOP3:
        INT 10H
        INC CX
        CMP CX, BALL_INIT_END_COL
        JNZ BMUR_LOOP3

        MOV DX, BALL_INIT_START_ROW
        INC DX
        MOV CX, BALL_INIT_END_COL
        DEC CX
    BMUR_LOOP4:
        INT 10H
        INC DX
        CMP DX, BALL_INIT_END_ROW
        JNZ BMUR_LOOP4

        CALL BM_DELAY

        SUB BX, 1
        JNZ BMUR_MAIN_LOOP
        JMP BMUR_DONE

    BMUR_CM_LR:
        MOV BALL_STATE, 3             ; CHANGE DIRECTION TO LR
        JMP BMUR_DONE

    BMUR_ROCKET_CHECK:
        MOV DX, BALL_INIT_START_ROW
        CMP DX, ROCKET_INIT_START_ROW
        JNGE BMUR_FAILED
        MOV DX, BALL_INIT_END_ROW
        CMP DX, ROCKET_INIT_END_ROW
        JNLE BMUR_FAILED
        JMP BMUR_BALL_HIT

    BMUR_BALL_HIT:
        ; CHANGE BALL COLOR
        CALL INC_AND_PRINT_SCORE
        MOV BALL_STATE, 1             ; CHANGE DIRECTION TO UL
        JMP BMUR_DONE

    BMUR_FAILED:
        ; GAME FAILED
        JMP BMUR_DONE

    BMUR_DONE:
        RET
ENDP BMUR

BMLR PROC
        MOV AH, 0CH
        MOV BX, 3                     ; WITH ONE INPUT, SHIFT 3 PIXELS

    BMLR_MAIN_LOOP:
        MOV AL, 0

        MOV DX, BALL_INIT_END_ROW
        CMP DX, LOWER_WALL_START_ROW  ; CHECK IF WE HIT LOWER WALL
        JE BMLR_CM_UR                 ; CHANGE MOVEMENT TO UR
        MOV DX, BALL_INIT_END_COL
        CMP DX, ROCKET_INIT_START_COL ; CHECK IF WE ARE GOING TO HIT ROCKET OR NOT
        JE BMLR_ROCKET_CHECK

        MOV DX, BALL_INIT_START_ROW
        MOV CX, BALL_INIT_START_COL
    BMLR_LOOP1:
        INT 10H
        INC CX
        CMP CX, BALL_INIT_END_COL
        JNZ BMLR_LOOP1

        INC BALL_INIT_START_COL
        INC BALL_INIT_START_ROW

        MOV DX, BALL_INIT_START_ROW
        MOV CX, BALL_INIT_START_COL
        DEC CX
    BMLR_LOOP2:
        INT 10H
        INC DX
        CMP DX, BALL_INIT_END_ROW
        JNZ BMLR_LOOP2

        INC BALL_INIT_END_COL
        INC BALL_INIT_END_ROW

        MOV AL, 1111B

        MOV DX, BALL_INIT_END_ROW
        DEC DX
        MOV CX, BALL_INIT_START_COL
    BMLR_LOOP3:
        INT 10H
        INC CX
        CMP CX, BALL_INIT_END_COL
        JNZ BMLR_LOOP3

        MOV DX, BALL_INIT_START_ROW
        MOV CX, BALL_INIT_END_COL
        DEC CX
    BMLR_LOOP4:
        INT 10H
        INC DX
        CMP DX, BALL_INIT_END_ROW
        JNZ BMLR_LOOP4

        CALL BM_DELAY

        SUB BX, 1
        JNZ BMLR_MAIN_LOOP
        JMP BMLR_DONE

    BMLR_CM_UR:
        MOV BALL_STATE, 2             ; CHANGE DIRECTION TO UR
        JMP BMLR_DONE

    BMLR_ROCKET_CHECK:
        MOV DX, BALL_INIT_START_ROW
        CMP DX, ROCKET_INIT_START_ROW
        JNGE BMLR_FAILED
        MOV DX, BALL_INIT_END_ROW
        CMP DX, ROCKET_INIT_END_ROW
        JNLE BMLR_FAILED
        JMP BMLR_BALL_HIT

    BMLR_BALL_HIT:
        ; CHANGE BALL COLOR
        CALL INC_AND_PRINT_SCORE
        MOV BALL_STATE, 0             ; CHANGE DIRECTION TO LL
        JMP BMLR_DONE

    BMLR_FAILED:
        ; GAME FAILED
        JMP BMLR_DONE

    BMLR_DONE:
        RET
ENDP BMLR

INC_AND_PRINT_SCORE PROC
        CMP INIT_SCORE_LD, '9'
        JE IAPS_INC_HD
        INC INIT_SCORE_LD
        CALL SET_CURSOR_POSITION_LD
        CALL DRAW_INIT_SCORE_LD
        JMP IAPS_END

    IAPS_INC_HD:
        INC INIT_SCORE_HD
        MOV INIT_SCORE_LD, '0'
        CALL SET_CURSOR_POSITION_HD
        CALL DRAW_INIT_SCORE_HD
        CALL SET_CURSOR_POSITION_LD
        CALL DRAW_INIT_SCORE_LD

    IAPS_END:
        RET
ENDP INC_AND_PRINT_SCORE

DELAY PROC
        MOV CX, 4FFFH

    DELAY_LOOP:
        LOOP DELAY_LOOP

        RET
ENDP DELAY

BM_DELAY PROC
        MOV CX, 5FFFH

    BM_DELAY_LOOP:
        LOOP BM_DELAY_LOOP

        RET
ENDP BM_DELAY

END MAIN